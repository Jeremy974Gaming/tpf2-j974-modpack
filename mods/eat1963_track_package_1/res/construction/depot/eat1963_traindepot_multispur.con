local global = require "eatglobal_v1_16"
local utils = global.utils

local logFn
if eat1963_track_package_1_debug then
	logFn = utils.createLogFn ("[eat1963_railstation_cargo_multispur.con]")
else
	logFn = function(...) end
end

local paramsutil = require "paramsutil"
local trackSelector = nil

local config = {
	trackTypes = {
		"standard.lua",
		"high_speed.lua",
		},
	models = {
			{
				id = "depot/train_small_old.mdl",
				transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
				snapNodes = { 1 },
				groundFace = {{28.0, -5}, { 28.0, 5}, { 13.0, 5}, { 13.0, 8}, { -7.0, 8}, { -7.0, 7.5}, { -15.0, 7.5}, { -15.0, 5}, {-28.0, 5 }, {-28.0, -5 } },
			},
		},
	bumperModels = {
		["750"] =	{
				id = "depot/eat1963_bumperdepot_750.mdl",
				transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
				snapNodes = { 1 },
			},
		["760"] =	{
				id = "depot/eat1963_bumperdepot_750.mdl",
				transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
				snapNodes = { 1 },
			},
		["1000"] =	{
				id = "depot/eat1963_bumperdepot_1000.mdl",
				transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
				snapNodes = { 1 },
			},
		["1435"] =	{
				id = "depot/eat1963_bumperdepot_1435.mdl",
				transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
				snapNodes = { 1 },
			},
		["1520"] =	{
				id = "depot/eat1963_bumperdepot_1520.mdl",
				transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
				snapNodes = { 1 },
			},
	},
}

local function getModels(params)
	local modelIndex = params.eat1963_depot_style + 1
	if (modelIndex == 1) then
		return config.models[modelIndex]
	else
		if (trackSelector ~= nil) then
			return config.bumperModels[tostring(trackSelector.getTrackWidth(params))]
		else
			return config.bumperModels["1435"]
		end
	end
end

local function getEdges(params)
	local height = params.state.track.railBase + params.state.track.railHeight
	local edges = {
		{
			{ { -19.1, .0, -height }, 		{ -20.0, .0, .0 } },
			{ { -39.1, .0, -height }, 	{ -20.0, .0, .0 } },
		},
		{
			{ {   0, 0, -height }, 	{ -20, 0, 0 } },
			{ { -20, 0, -height }, 	{ -20, 0, 0 } },					
		},
	}
	
	return edges[math.min(params.eat1963_depot_style + 1, 2)]
end

local function getParams()
	local result = {
		{
			key = "eat1963_depot_style",
			name = _("Style des Depots"),
			values = { _("UG-Depot"), _("Prellbock") },
			yearFrom = 0,
			yearTo = 0
		},
		{
			key = "trackType",
			name = _("Track type"),
			values = { _("Standard"), _("High-speed") },
			yearFrom = 0,
			yearTo = 0
		},
		{
			key = "catenary",
			name = _("Catenary"),
			values = { _("No"), _("Yes") },
			defaultIndex = 0,
			yearFrom = 1910,
			yearTo = 0
		},
	}
	
	if (type(eat1963_track_api) == "table") then
		trackSelector = eat1963_track_api.modifyTrackCatenaryEx(result)
	end
	
	return result
end

function data()
	return { 
			type = "RAIL_DEPOT",
			description = {
				name = _("Train depot"),			
				description = _("Used to buy/sell trains.")
			},
			availability = {
				yearFrom = 1850
			},
			order = utils.getOrder(19275, 1, 3),
			params = getParams(),
			
			updateFn = function(params)
				if (trackSelector ~= nil) then
					config.trackTypes = trackSelector.getTrackTypes(params)
				end
				
				params = global.conutils.checkParams(getParams(), params)
				local result = { }
				local model = getModels(params)
				
				result.models = { 
					{
						id = model.id,
						transf = model.transf
					}
				}

				local height = params.state.track.railBase + params.state.track.railHeight

				result.edgeLists = {
					{
						type = "TRACK",
						params = {
							type = config.trackTypes[params.trackType + 1],
							catenary = params.catenary == 1,
						},
						edges = getEdges(params),
						snapNodes = model.snapNodes,
					}
				}

				result.groundFaces = { }
				local groundFace = model.groundFace
				if (groundFace ~= nil) then
					result.groundFaces[#result.groundFaces + 1] = { face = groundFace, modes = { { type = "FILL", key = "town_concrete" } } }
					result.groundFaces[#result.groundFaces + 1] = { face = groundFace, modes = { { type = "STROKE_OUTER", key = "building_paving" } } }
				end
				
				result.cost = 18000

				return result
			end
		}
end
